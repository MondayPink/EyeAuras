<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:eye="http://coderush.net/poeeye/">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/Themes/Styles.xaml" />
        <ResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/Themes/SlimScrollbar.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.togglebutton.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type materialDesign:ColorPicker}" x:Key="ColorPickerWithPopupStyle">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type materialDesign:ColorPicker}">
                    <Grid x:Name="colorPickerRoot">
                        <Popup x:Name="colorPopup" StaysOpen="False" Height="150"
                               Width="{Binding ElementName=colorPickerRoot, Path=ActualWidth}">
                            <Border BorderThickness="1" BorderBrush="{DynamicResource SecondaryAccentBrush}">
                                <materialDesign:ColorPicker HueSliderPosition="{TemplateBinding HueSliderPosition}" x:Name="colorPicker"
                                                            MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}"
                                                            Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Color}" />
                            </Border>
                        </Popup>

                        <DockPanel >
                            <ToggleButton Height="36" Width="36"
                                          Margin="5,0,0,0"
                                          Focusable="False" IsTabStop="False"
                                          Style="{StaticResource MaterialDesignFlatPrimaryToggleButton}"
                                          IsHitTestVisible="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, Converter={StaticResource NotConverter}}"
                                          DockPanel.Dock="Right" IsChecked="{Binding ElementName=colorPopup, Path=IsOpen}">
                                <Ellipse Width="36" Height="36" StrokeThickness="1" Stroke="{DynamicResource SecondaryAccentBrush}">
                                    <Ellipse.Fill>
                                        <SolidColorBrush Color="{Binding ElementName=colorPicker, Path=Color}" />
                                    </Ellipse.Fill>
                                </Ellipse>
                            </ToggleButton>

                            <TextBox x:Name="colorBox" DockPanel.Dock="Left"
                                     eye:FocusHelper.IsFocused="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsFocused}"
                                     Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                                     materialDesign:HintAssist.Hint="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:HintAssist.Hint)}" 
                                     Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Color, Converter={StaticResource ColorToStringConverter}}" />
                        </DockPanel>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style x:Key="MaterialNumericUpDownStyleKey"
           TargetType="{x:Type xctk:InputBase}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <xctk:ButtonSpinner x:Name="PART_Spinner"
                                        IsTabStop="False"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        HorizontalContentAlignment="Stretch"
                                        VerticalContentAlignment="Stretch">
                        <TextBox Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                                 x:Name="PART_TextBox"
                                 BorderThickness="0"
                                 Background="{TemplateBinding Background}"
                                 Foreground="{TemplateBinding Foreground}"
                                 IsTabStop="True"
                                 MinWidth="20"
                                 AcceptsReturn="False"
                                 TextWrapping="NoWrap" />
                    </xctk:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly"
                                    Value="True"
                                    TargetName="PART_TextBox" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                                     Value="True">
                            <Setter Property="IsReadOnly"
                                    Value="True"
                                    TargetName="PART_TextBox" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding (materialDesign:HintAssist.IsFloating), RelativeSource={RelativeSource Self}}"
                                     Value="False">
                            <Setter Property="Style"
                                    Value="{StaticResource MaterialDesignTextBox}"
                                    TargetName="PART_TextBox" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsFocused"
                                 Value="True">
                            <Setter TargetName="PART_TextBox"
                                    Property="FocusManager.FocusedElement"
                                    Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>